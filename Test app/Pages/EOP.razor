@page "/eop"

@inject IDbService _db;

<div>
    <table width="100%">
        <tr>
            <td width="25%">
                <p class="d-inline-block, float-left">Created EOPs:</p>
                <p class="d-inline-block, float-right">@CreatedEopCount</p>
            </td>
            <td width="25%">
                <p class="d-inline-block, float-left">Covered Airports:</p>
                <p class="d-inline-block, float-right">@CoveredAirports</p>
            </td>
            <td width="25%">
                <p class="d-inline-block, float-left">Created this week (w@(ISOWeek.GetWeekOfYear(DateTime.Now))):</p>
                <p class="d-inline-block, float-right">@CreatedSinceLast</p>
            </td>
            <td width="25%"></td>
        </tr>
        <tr>
            <td width="25%">
                <p class="d-inline-block, float-left">Approved EOPs:</p>
                <p class="d-inline-block, float-right">@ApprovedEopCount</p>
            </td>
            <td width="25%">
                <p class="d-inline-block, float-left">Covered Airports (approved):</p>
                <p class="d-inline-block, float-right">@CoveredAirportsApproved</p>
            </td>
            <td width="25%">
                <p class="d-inline-block, float-left">Approved this week (w@(ISOWeek.GetWeekOfYear(DateTime.Now))):</p>
                <p class="d-inline-block, float-right">@ApprovedSinceLast</p>
            </td>
            <td width="25%"></td>
        </tr>
        <tr>
            <td width="25%">
                <h6>Last updated: @UpdatedAt</h6>
                <button class="update-btn" @onclick="UpdateSite" disabled="@IsUpdating">Update now</button>
            </td>
            <td width="25%"></td>
            <td width="25%"></td>
            <td width="25%"></td>
        </tr>
    </table>

    <table width="100%">
        <tr>
            <td width="50%"><LineChart @ref="createdReviewedLineChart" TItem="int" /></td>
            <td width="50%"><LineChart @ref="airportsWithEopsLineChart" TItem="int" /></td>
        </tr>
        <tr>
            <td width="50%"><BarChart @ref="createdReviewedBarChart" TItem="int" /></td>
            <td width="50%"><BarChart @ref="regionalCoveragesBarChart" TItem="int" /></td>
        </tr>
    </table>

    <br />

    <h4 class="mt-4">Generated EOPs</h4>
    <input @bind-value="SearchTerm" @bind-value:event="oninput" placeholder="Search for keywords" />
    <span class="text-muted ml-5">Showing @(Math.Min(FilteredEops.Count, MaxAmountShown)) out of @Eops.Count</span>
    <button @onclick="@(() => { MaxAmountShown = Eops.Count(); SearchTerm = ""; })" disabled="@IsUpdating">Show all</button>
    <div class="table-wrapper">
        <table class="table">
            <thead class="text-center">
                <tr>
                    <th class="clickable" width="80px" @onclick="@(() => SortEops(x => x.ProcedureId))">
                        <span>ID</span>
                        <span class="fa @GetSortIcon(x => x.ProcedureId)"></span>
                    </th>
                    <th class="clickable" width="100px" @onclick="@(() => SortEops(x => x.Runway.Airport.Icao))">
                        <span>Airport ICAO</span>
                        <span class="fa @GetSortIcon(x => x.Runway.Airport.Icao)"></span>
                    </th>
                    <th class="clickable" width="100px" @onclick="@(() => SortEops(x => x.Runway.Name))">
                        <span>Runway</span>
                        <span class="fa @GetSortIcon(x => x.Runway.Name)"></span>
                    </th>
                    <th class="clickable" width="100px" @onclick="@(() => SortEops(x => x.IsPublished))">
                        <span>Published</span>
                        <span class="fa @GetSortIcon(x => x.IsPublished)"></span>
                    </th>
                    <th class="clickable" width="120px" @onclick="@(() => SortEops(x => x.CreatedOn))">
                        <span>Created</span>
                        <span class="fa @GetSortIcon(x => x.CreatedOn)"></span>
                    </th>
                    <th>
                        <span>Description</span>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var eop in FilteredEops.Take(MaxAmountShown))
                {
                    <tr>
                        <td class="text-center">@eop.ProcedureId</td>
                        <td class="text-center">@(eop.Runway.Airport.Icao != null ? eop.Runway.Airport.Icao : "Unknown") </td>
                        <td class="text-center">@(eop.Runway.Name != null ? eop.Runway.Name : "Unknown") </td>
                        <td class="text-center"><input type="checkbox" checked="@eop.IsPublished" onclick="return false" /></td>
                        <td class="text-center">@(eop.CreatedOn != null ? eop.CreatedOn.ToString("yyyy-MM-dd HH':'mm':'ss") : "Unknown") </td>
                        <td>@(eop.Description != null ? eop.Description : "Unknown") </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    @using ServiceLayer.Models
    @using System.Globalization
    @using System.Linq.Expressions

    private int CreatedEopCount = 0;
    private int ApprovedEopCount = 0;
    private int CoveredAirports = 0;
    private int CoveredAirportsApproved = 0;
    private int CreatedSinceLast = 0;
    private int ApprovedSinceLast = 0;

    private string UpdatedAt = "";
    private bool IsUpdating = false;

    LineChart<int> createdReviewedLineChart;
    BarChart<int> createdReviewedBarChart;
    LineChart<int> airportsWithEopsLineChart;
    BarChart<int> regionalCoveragesBarChart;

    private List<string> LabelListWeeks = new List<string>();
    private List<string> LabelListRegions = new List<string> { "US", "CAN", "EUR", "SA", "Rest of World" };

    private List<int> CreatedCount = new List<int>();
    private List<int> ReviewedCount = new List<int>();
    private List<int> CreatedPerWeek = new List<int>();
    private List<int> ReviewedPerWeek = new List<int>();
    private List<int> AirportsWithEopsCount = new List<int>();
    private Dictionary<string, int> RegionalCoverages = new Dictionary<string, int>();


    string SearchTerm { get; set; } = "";
    int MaxAmountShown = 500;
    Func<EngineOutProcedure, IComparable> CurrentSort = x => x.CreatedOn;
    bool IsSortedAscending = false;
    List<EngineOutProcedure> Eops = new List<EngineOutProcedure>();
    List<EngineOutProcedure> FilteredEops => Eops.Where(i => (i.ProcedureId.ToString()?.ToLower().Contains(SearchTerm.ToLower()) ?? false)
                                                          || (i.Runway.Airport.Icao?.ToLower().Contains(SearchTerm.ToLower()) ?? false)
                                                          || (i.Description?.ToLower().Contains(SearchTerm.ToLower()) ?? false)).ToList();


    protected override async Task OnInitializedAsync()
    {
        await UpdateSite();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        //await RedrawGraphs();
    //    }
    //}

    private async Task UpdateSite()
    {
        IsUpdating = true;

        await UpdateData();

        IsSortedAscending = !IsSortedAscending;
        SortEops(CurrentSort);

        await RedrawGraphs();

        IsUpdating = false;
    }

    private async Task UpdateData()
    {
        Eops = (await _db.GetEops()).Where(e => e.CreatedBy != "Internal Testing").ToList();
        UpdatedAt = DateTime.Now.ToString("yyyy-MM-dd HH':'mm':'ss");

        CreatedEopCount = Eops.Count();
        ApprovedEopCount = Eops.Where(e => e.IsPublished && !e.IsDeleted).Count();
        CoveredAirports = Eops.GroupBy(e => e.Runway.Airport).Count();
        CoveredAirportsApproved = Eops.Where(e => e.IsPublished && !e.IsDeleted).GroupBy(e => e.Runway.Airport).Count();
        CreatedSinceLast = Eops.Where(e => e.CreatedOn > DateTime.Now.AddDays(-((int)DateTime.Now.DayOfWeek - 1)).Date).Count();
        ApprovedSinceLast = Eops.Where(e => e.CreatedOn > DateTime.Now.AddDays(-((int)DateTime.Now.DayOfWeek - 1)).Date && e.IsPublished && e.IsDeleted).Count();

        CreatedCount = new List<int>();
        ReviewedCount = new List<int>();
        CreatedPerWeek = new List<int>();
        ReviewedPerWeek = new List<int>();
        AirportsWithEopsCount = new List<int>();
        RegionalCoverages = new Dictionary<string, int>();
        LabelListWeeks = new List<string>();

        // Determine earliest eop creation date and reduce it to monday at 00:00
        DateTime startDate = Eops.Select(e => e.CreatedOn).Min();
        startDate = startDate.AddDays(-((int)startDate.DayOfWeek - 1)).Date;

        while (startDate < DateTime.Now)
        {
            startDate = startDate.AddDays(7);

            var createdEopsSoFar = Eops.Where(e => e.CreatedOn < startDate).ToList();
            var newCreatedEopsCount = createdEopsSoFar.Count() - CreatedCount.LastOrDefault();
            CreatedCount.Add(createdEopsSoFar.Count());
            CreatedPerWeek.Add(newCreatedEopsCount);

            var reviewedEopsSoFar = Eops.Where(e => e.ReviewedOn < startDate && e.IsPublished && !e.IsDeleted).ToList();
            var newReviewedEopsCount = reviewedEopsSoFar.Count() - ReviewedCount.LastOrDefault();
            ReviewedCount.Add(reviewedEopsSoFar.Count());
            ReviewedPerWeek.Add(newReviewedEopsCount);

            var airportsWithEops = reviewedEopsSoFar.GroupBy(eop => eop.Runway.Airport).ToList();
            AirportsWithEopsCount.Add(airportsWithEops.Count());

            LabelListWeeks.Add(startDate.ToString("yy") + " w" + ISOWeek.GetWeekOfYear(startDate.AddDays(-7)));
        }

        LabelListRegions.ForEach(region => RegionalCoverages[region] = 0);
        var eopIcaos = Eops.Where(e => e.IsPublished && !e.IsDeleted).Select(e => e.Runway).Select(r => r.Airport.Icao).ToList();
        foreach (var icao in eopIcaos)
        {
            if (String.IsNullOrEmpty(icao))
            {
                continue;
            }
            else if (icao.StartsWith("K"))
            {
                RegionalCoverages["US"]++;
            }
            else if (icao.StartsWith("C"))
            {
                RegionalCoverages["CAN"]++;
            }
            else if (icao.StartsWith("L") || icao.StartsWith("E") || icao.StartsWith("U") || icao.StartsWith("B"))
            {
                RegionalCoverages["EUR"]++;
            }
            else if (icao.StartsWith("S") || icao.StartsWith("T"))
            {
                RegionalCoverages["SA"]++;
            }
            else
            {
                RegionalCoverages["Rest of World"]++;
            }
        }
    }

    async Task RedrawGraphs()
    {
        await createdReviewedLineChart.Clear();
        await createdReviewedBarChart.Clear();
        await airportsWithEopsLineChart.Clear();
        await regionalCoveragesBarChart.Clear();

        await createdReviewedLineChart.AddLabelsDatasetsAndUpdate(LabelListWeeks, GetCumulativeCreatedReveiwedDataset());
        await createdReviewedBarChart.AddLabelsDatasetsAndUpdate(LabelListWeeks, GetNewCreatedReviewedDataset());
        await airportsWithEopsLineChart.AddLabelsDatasetsAndUpdate(LabelListWeeks, GetAirportWithEopsDataset());
        await regionalCoveragesBarChart.AddLabelsDatasetsAndUpdate(LabelListRegions, GetRegionalCoveragesDataset());
    }

    #region
    LineChartDataset<int>[] GetCumulativeCreatedReveiwedDataset()
    {
        return new List<LineChartDataset<int>> {
                    new LineChartDataset<int>
                        {
                            Label = "Created EOPs",
                            Data = CreatedCount,
                            PointRadius = 3,
                            Fill = false,
                            BorderColor = "rgba(66,133,244,1)",
                            BackgroundColor = "rgba(66,133,244,1)",
                            PointBackgroundColor = Enumerable.Repeat("rgba(66,133,244,1)", CreatedCount.Count()).ToList()
                        },
                    new LineChartDataset<int>
                        {
                            Label = "Approved EOPs",
                            Data = ReviewedCount,
                            PointRadius = 3,
                            Fill = false,
                            BorderColor = "rgba(234,67,53,1)",
                            BackgroundColor = "rgba(234,67,53,1)",
                            PointBackgroundColor = Enumerable.Repeat("rgba(234,67,53,1)", ReviewedCount.Count()).ToList()
                        }
                }.ToArray();
    }

    BarChartDataset<int>[] GetNewCreatedReviewedDataset()
    {
        return new List<BarChartDataset<int>> {
                    new BarChartDataset<int>
                        {
                            Label = "Created since last",
                            Data = CreatedPerWeek,
                            BackgroundColor = "rgba(66,133,244,1)"
                        },
                    new BarChartDataset<int>
                        {
                            Label = "Approved since last",
                            Data = ReviewedPerWeek,
                            BackgroundColor = "rgba(234,67,53,1)"
                        }
                }.ToArray();
    }

    LineChartDataset<int>[] GetAirportWithEopsDataset()
    {
        return new List<LineChartDataset<int>> {
                    new LineChartDataset<int>
                        {
                            Label = "Airports with EOPs",
                            Data = AirportsWithEopsCount,
                            PointRadius = 3,
                            Fill = false,
                            BorderColor = "rgba(234,67,53,1)",
                            BackgroundColor = "rgba(234,67,53,1)",
                            PointBackgroundColor = Enumerable.Repeat("rgba(234,67,53,1)", AirportsWithEopsCount.Count()).ToList()
                        }
                }.ToArray();
    }

    BarChartDataset<int>[] GetRegionalCoveragesDataset()
    {
        return new List<BarChartDataset<int>> {
                    new BarChartDataset<int>
                        {
                            Label = "Reagonal coverage",
                            Data = RegionalCoverages.Values.ToList(),
                            BackgroundColor = "rgba(234,67,53,1)"
                        }
                }.ToArray();
    }
    #endregion

    private void SortEops(Func<EngineOutProcedure, IComparable> getProp)
    {
        Expression<Func<EngineOutProcedure, IComparable>> sovs = x => x.ProcedureId;
        var bnag = CurrentSort.ToString();
        if (getProp != CurrentSort)
        {
            CurrentSort = getProp;
            IsSortedAscending = true;
            Eops = Eops.OrderBy(x => getProp(x)).ToList();
        }
        else
        {
            IsSortedAscending = !IsSortedAscending;
            if (IsSortedAscending)
            {
                Eops = Eops.OrderBy(x => getProp(x)).ToList();
            }
            else
            {
                Eops = Eops.OrderByDescending(x => getProp(x)).ToList();
            }
        }
    }

    private string GetSortIcon(Func<EngineOutProcedure, IComparable> getProp)
    {
        //if (getProp != CurrentSort)
        //{
        //    return string.Empty;
        //}
        //if (IsSortedAscending)
        //{
        //    return "fa-sort-up";
        //}
        //else
        //{
        //    return "fa-sort-down";
        //}

        return string.Empty;
    }
}
