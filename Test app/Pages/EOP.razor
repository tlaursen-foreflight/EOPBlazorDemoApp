@page "/eop"

@inject IDbService _db;

<div>
    <table>
        <tr>
            <td class="padding-right-20 larger">Created EOPs:</td>
            <td class="padding-right-60 larger">@CreatedEopCount</td>
            <td class="padding-right-20 larger">Covered Airports:</td>
            <td class="padding-right-60 larger">@CoveredAirports</td>
            <td class="padding-right-20 larger">Created this week (w@(ISOWeek.GetWeekOfYear(DateTime.Now))):</td>
            <td class="padding-right-60 larger">@CreatedSinceLast</td>
        </tr>
        <tr>
            <td class="padding-right-20 larger">Approved EOPs:</td>
            <td class="padding-right-60 larger">@ApprovedEopCount</td>
            <td class="padding-right-20 larger">Covered Airports (approved):</td>
            <td class="padding-right-60 larger">@CoveredAirportsApproved</td>
            <td class="padding-right-20 larger">Approved this week (w@(ISOWeek.GetWeekOfYear(DateTime.Now))):</td>
            <td class="padding-right-60 larger">@ApprovedSinceLast</td>
        </tr>
    </table>

    <br/>
    <h6>Last updated: @UpdatedAt</h6>
    <TelerikButton OnClick="@UpdateSite" Enabled="@(!IsUpdating)">Update now</TelerikButton>

    <table width="100%" height="850px">
        <tr>
            <td width="50%">
                <TelerikChart Height="100%" @ref="CreatedReviewedLineChart">
                    <ChartSeriesItems>
                        <ChartSeries Type="ChartSeriesType.Line" Name="Created" Data="@CreatedCount.Select(x => x.ToString())" Color="rgb(66,133,244)">
                            <ChartSeriesMarkers Size="5" />
                        </ChartSeries>
                        <ChartSeries Type="ChartSeriesType.Line" Name="Approved" Data="@ReviewedCount.Select(x => x.ToString())" Color="rgb(234,67,53)">
                            <ChartSeriesMarkers Size="5" />
                        </ChartSeries>
                    </ChartSeriesItems>

                    <ChartValueAxes>
                        <ChartValueAxis>
                            <ChartValueAxisTitle Text="Count"></ChartValueAxisTitle>
                        </ChartValueAxis>
                    </ChartValueAxes>

                    <ChartCategoryAxes>
                        <ChartCategoryAxis Categories="@LabelListWeeks.ToArray()">
                            <ChartCategoryAxisLabels Step="2" Font="12px 'Arial'">
                                <ChartCategoryAxisLabelsRotation Angle="-60" />
                            </ChartCategoryAxisLabels>
                        </ChartCategoryAxis>
                    </ChartCategoryAxes>

                    <ChartTooltip Visible="true" Shared="true" Opacity="0.75" />

                    <ChartTitle Text="Total created/reviewed EOPs" />

                    <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom" />
                </TelerikChart>
            </td>
            <td width="50%">
                <TelerikChart Height="100%" @ref="AirportsWithEopsLineChart">
                    <ChartSeriesItems>
                        <ChartSeries Type="ChartSeriesType.Line" Name="Approved" Data="@AirportsWithEopsCount.Select(x => x.ToString())" Color="rgb(234,67,53)">
                            <ChartSeriesMarkers Size="5" />
                        </ChartSeries>
                    </ChartSeriesItems>

                    <ChartValueAxes>
                        <ChartValueAxis>
                            <ChartValueAxisTitle Text="Count"></ChartValueAxisTitle>
                        </ChartValueAxis>
                    </ChartValueAxes>

                    <ChartCategoryAxes>
                        <ChartCategoryAxis Categories="@LabelListWeeks.ToArray()">
                            <ChartCategoryAxisLabels Step="2" Font="12px 'Arial'">
                                <ChartCategoryAxisLabelsRotation Angle="-60" />
                            </ChartCategoryAxisLabels>
                        </ChartCategoryAxis>
                    </ChartCategoryAxes>

                    <ChartTooltip Visible="true" />

                    <ChartTitle Text="Airports with EOPs" />

                    <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom" />
                </TelerikChart>
            </td>
        </tr>
        <tr>
            <td width="50%">
                <TelerikChart Height="100%" @ref="CreatedReviewedBarChart">
                    <ChartSeriesItems>
                        <ChartSeries Type="ChartSeriesType.Column" Name="Created" Data="@CreatedPerWeek.Select(x => x.ToString())" Color="rgb(66,133,244)" />
                        <ChartSeries Type="ChartSeriesType.Column" Name="Approved" Data="@ReviewedPerWeek.Select(x => x.ToString())" Color="rgb(234,67,53)" />
                    </ChartSeriesItems>

                    <ChartValueAxes>
                        <ChartValueAxis>
                            <ChartValueAxisTitle Text="Count"></ChartValueAxisTitle>
                        </ChartValueAxis>
                    </ChartValueAxes>

                    <ChartCategoryAxes>
                        <ChartCategoryAxis Categories="@LabelListWeeks.ToArray()">
                            <ChartCategoryAxisLabels Step="2" Font="12px 'Arial'">
                                <ChartCategoryAxisLabelsRotation Angle="-60" />
                            </ChartCategoryAxisLabels>
                        </ChartCategoryAxis>
                    </ChartCategoryAxes>

                    <ChartTooltip Visible="true" Shared="true" Opacity="0.75" />

                    <ChartTitle Text="Created/Reviewed per week" />

                    <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom" />
                </TelerikChart>
            </td>
            <td width="50%">
                <TelerikChart Height="100%" @ref="RegionalCoveragesBarChart">
                    <ChartSeriesItems>
                        <ChartSeries Type="ChartSeriesType.Column" Name="Approved" Data="@RegionalCoverages.Values.Select(x => x.ToString())" Color="rgb(234,67,53)">
                            <ChartSeriesLabels Visible="true" Color="rgb(234,67,53)" />
                        </ChartSeries>
                    </ChartSeriesItems>

                    <ChartValueAxes>
                        <ChartValueAxis>
                            <ChartValueAxisTitle Text="Count"></ChartValueAxisTitle>
                        </ChartValueAxis>
                    </ChartValueAxes>

                    <ChartCategoryAxes>
                        <ChartCategoryAxis Categories="@LabelListRegions.ToArray()" />
                    </ChartCategoryAxes>

                    <ChartTitle Text="Regional Coverage" />

                    <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom" />
                </TelerikChart>
            </td>
        </tr>
    </table>

    <br />

    <h4 class="mt-4">Generated EOPs</h4>
    <div class="table-wrapper">
        <TelerikGrid Data=@Eops EditMode="@GridEditMode.Inline" Height="700px"
                     Pageable="true" PageSize="400" FilterMode="@GridFilterMode.FilterMenu"
                     Groupable="true" Sortable="true" SortMode="@SortMode.Multiple">
            <GridColumns>
                <GridColumn Field=@nameof(EngineOutProcedure.ProcedureId) Title="ID" Width="100px" TextAlign="ColumnTextAlign.Center" />
                <GridColumn Field="Runway.Airport.Icao" Title="Airport" Width="120px" TextAlign="ColumnTextAlign.Center">
                    <Template>
                        @((context as EngineOutProcedure).Runway.Airport.Icao != null ? (context as EngineOutProcedure).Runway.Airport.Icao : "Unknown")
                    </Template>
                </GridColumn>
                <GridColumn Field="Runway.Name" Title="Runway" Width="120px" TextAlign="ColumnTextAlign.Center">
                    <Template>
                        @((context as EngineOutProcedure).Runway.Name != null ? (context as EngineOutProcedure).Runway.Name : "Unknown")
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(EngineOutProcedure.IsPublished) Title="Published" Width="120px" TextAlign="ColumnTextAlign.Center">
                    <Template>
                        @{
                            if ((context as EngineOutProcedure).IsPublished)
                            {
                                <span class="k-badge k-badge-md k-badge-solid k-badge-success k-badge-rounded">Published</span>
                            }
                            else
                            {
                                <span class="k-badge k-badge-md k-badge-solid k-badge-error k-badge-rounded">Not Published</span>
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(EngineOutProcedure.CreatedOn) Title="Created" Width="120px" TextAlign="ColumnTextAlign.Center">
                    <Template>
                        @((context as EngineOutProcedure).CreatedOn != null ? (context as EngineOutProcedure).CreatedOn.ToString("yyyy/MM/dd HH':'mm") : "Unknown")
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(EngineOutProcedure.Description) Title="Description">
                    <Template>
                        @((context as EngineOutProcedure).Description != null ? (context as EngineOutProcedure).Description : "Unknown")
                    </Template>
                </GridColumn>
            </GridColumns>
        </TelerikGrid>
    </div>

</div>


@code {
    @using ServiceLayer.Models
    @using System.Globalization

    private int CreatedEopCount = 0;
    private int ApprovedEopCount = 0;
    private int CoveredAirports = 0;
    private int CoveredAirportsApproved = 0;
    private int CreatedSinceLast = 0;
    private int ApprovedSinceLast = 0;

    private string UpdatedAt = "";
    private bool IsUpdating = false;

    public TelerikChart CreatedReviewedLineChart { get; set; }
    public TelerikChart CreatedReviewedBarChart { get; set; }
    public TelerikChart AirportsWithEopsLineChart { get; set; }
    public TelerikChart RegionalCoveragesBarChart { get; set; }

    private List<string> LabelListWeeks = new List<string>();
    private List<string> LabelListRegions = new List<string> { "US", "CAN", "EUR", "SA", "Rest of World" };

    private List<int> CreatedCount = new List<int>();
    private List<int> ReviewedCount = new List<int>();
    private List<int> CreatedPerWeek = new List<int>();
    private List<int> ReviewedPerWeek = new List<int>();
    private List<int> AirportsWithEopsCount = new List<int>();
    private Dictionary<string, int> RegionalCoverages = new Dictionary<string, int>();

    List<EngineOutProcedure> Eops = new List<EngineOutProcedure>();


    protected override async Task OnInitializedAsync()
    {
        await UpdateSite();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        //await RedrawGraphs();
    //    }
    //}

    private async Task UpdateSite()
    {
        IsUpdating = true;

        await UpdateData();

        RedrawGraphs();

        IsUpdating = false;
    }

    void RedrawGraphs()
    {
        CreatedReviewedLineChart.Refresh();
        CreatedReviewedBarChart.Refresh();
        AirportsWithEopsLineChart.Refresh();
        RegionalCoveragesBarChart.Refresh();
    }

    private async Task UpdateData()
    {
        Eops = (await _db.GetEops()).Where(e => e.CreatedBy != "Internal Testing").ToList();
        UpdatedAt = DateTime.Now.ToString("yyyy-MM-dd HH':'mm':'ss");

        CreatedEopCount = Eops.Count();
        ApprovedEopCount = Eops.Where(e => e.IsPublished && !e.IsDeleted).Count();
        CoveredAirports = Eops.GroupBy(e => e.Runway.Airport).Count();
        CoveredAirportsApproved = Eops.Where(e => e.IsPublished && !e.IsDeleted).GroupBy(e => e.Runway.Airport).Count();
        CreatedSinceLast = Eops.Where(e => e.CreatedOn > DateTime.Now.AddDays(-((int)DateTime.Now.DayOfWeek - 1)).Date).Count();
        ApprovedSinceLast = Eops.Where(e => e.ReviewedOn > DateTime.Now.AddDays(-((int)DateTime.Now.DayOfWeek - 1)).Date && e.IsPublished && !e.IsDeleted).Count();
        var bnag = DateTime.Now.AddDays(-((int)DateTime.Now.DayOfWeek - 1)).Date;
        CreatedCount = new List<int>();
        ReviewedCount = new List<int>();
        CreatedPerWeek = new List<int>();
        ReviewedPerWeek = new List<int>();
        AirportsWithEopsCount = new List<int>();
        RegionalCoverages = new Dictionary<string, int>();
        LabelListWeeks = new List<string>();

        // Determine earliest eop creation date and reduce it to monday at 00:00
        DateTime startDate = Eops.Select(e => e.CreatedOn).Min();
        startDate = startDate.AddDays(-((int)startDate.DayOfWeek - 1)).Date;

        while (startDate < DateTime.Now)
        {
            startDate = startDate.AddDays(7);

            var createdEopsSoFar = Eops.Where(e => e.CreatedOn < startDate).ToList();
            var newCreatedEopsCount = createdEopsSoFar.Count() - CreatedCount.LastOrDefault();
            CreatedCount.Add(createdEopsSoFar.Count());
            CreatedPerWeek.Add(newCreatedEopsCount);

            var reviewedEopsSoFar = Eops.Where(e => e.ReviewedOn < startDate && e.IsPublished && !e.IsDeleted).ToList();
            var newReviewedEopsCount = reviewedEopsSoFar.Count() - ReviewedCount.LastOrDefault();
            ReviewedCount.Add(reviewedEopsSoFar.Count());
            ReviewedPerWeek.Add(newReviewedEopsCount);

            var airportsWithEops = reviewedEopsSoFar.GroupBy(eop => eop.Runway.Airport).ToList();
            AirportsWithEopsCount.Add(airportsWithEops.Count());

            LabelListWeeks.Add(startDate.ToString("yy") + " w" + ISOWeek.GetWeekOfYear(startDate.AddDays(-7)));
        }

        LabelListRegions.ForEach(region => RegionalCoverages[region] = 0);
        var eopIcaos = Eops.Where(e => e.IsPublished && !e.IsDeleted).Select(e => e.Runway).Select(r => r.Airport.Icao).ToList();
        foreach (var icao in eopIcaos)
        {
            if (String.IsNullOrEmpty(icao))
            {
                continue;
            }
            else if (icao.StartsWith("K"))
            {
                RegionalCoverages["US"]++;
            }
            else if (icao.StartsWith("C"))
            {
                RegionalCoverages["CAN"]++;
            }
            else if (icao.StartsWith("L") || icao.StartsWith("E") || icao.StartsWith("U") || icao.StartsWith("B"))
            {
                RegionalCoverages["EUR"]++;
            }
            else if (icao.StartsWith("S") || icao.StartsWith("T"))
            {
                RegionalCoverages["SA"]++;
            }
            else
            {
                RegionalCoverages["Rest of World"]++;
            }
        }
    }
}
